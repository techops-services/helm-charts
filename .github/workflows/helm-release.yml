name: Release Charts

on:
  push:
    branches:
      - TECH-2871-improve-cicd-chartss
  pull_request:
    branches:
      - main
    types:
      - opened
      - synchronize

permissions:
  contents: read
  pull-requests: write

env:
  PR_NUMBER: ${{ github.event.number }}

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed-charts: ${{ steps.changed-charts.outputs.changed-charts }}
      has-changes: ${{ steps.changed-charts.outputs.has-changes }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Detect changed charts
        id: changed-charts
        run: |
          # Get list of all charts by scanning the charts directory
          ALL_CHARTS=$(find charts/ -maxdepth 1 -type d -not -path charts/ | sed 's|charts/||' | sort)
          echo "Available charts:"
          echo "$ALL_CHARTS"
          
          # Get list of changed files
          if [ "$GITHUB_EVENT_NAME" = "pull_request" ]; then
            CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }})
          else
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          fi
          
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # Check which charts have changes
          CHANGED_CHARTS=""
          for chart in $ALL_CHARTS; do
            if echo "$CHANGED_FILES" | grep -q "^charts/$chart/"; then
              if [ -z "$CHANGED_CHARTS" ]; then
                CHANGED_CHARTS="$chart"
              else
                CHANGED_CHARTS="$CHANGED_CHARTS,$chart"
              fi
            fi
          done
          
          echo "Changed charts: $CHANGED_CHARTS"
          echo "changed-charts=$CHANGED_CHARTS" >> $GITHUB_OUTPUT
          
          # Set flag if any charts changed
          if [ -n "$CHANGED_CHARTS" ]; then
            echo "has-changes=true" >> $GITHUB_OUTPUT
          else
            echo "has-changes=false" >> $GITHUB_OUTPUT
          fi

  no-changes:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.has-changes == 'false'
    permissions:
      pull-requests: write
    steps:
      - name: Post PR comment - No changes
        if: github.event_name == 'pull_request'
        run: |
          comment_body="## ‚ÑπÔ∏è No Helm Chart Changes Detected

          No changes were detected in any Helm charts for this PR.

          **Checked directories:**
          - \`charts/\`

          The workflow completed successfully with no tests needed. ‚úÖ"

          # Post comment to PR using curl
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments" \
            -d "{\"body\": $(echo "$comment_body" | jq -Rs .)}"

  test-charts:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.has-changes == 'true'
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Set up Minikube
        uses: medyagh/setup-minikube@master
        with:
          minikube-version: 'latest'
          kubernetes-version: 'stable'
          driver: docker

      - name: kubectl
        run: kubectl get pods -A

      - name: Install Helm
        uses: azure/setup-helm@v3

      - name: Wait for Minikube to be ready
        run: |
          minikube status
          kubectl get nodes
          kubectl wait --for=condition=Ready node/minikube --timeout=3m

      - name: Validate and test changed charts
        id: helm-tests
        continue-on-error: true
        run: |
          # Initialize results tracking
          TEST_RESULTS=""
          FAILED_CHARTS=""
          SUCCESS_CHARTS=""
          EXIT_CODE=0
          
          # Convert comma-separated list to array
          IFS=',' read -ra CHARTS <<< "${{ needs.detect-changes.outputs.changed-charts }}"
          
          for chart in "${CHARTS[@]}"; do
            echo "=================================="
            echo "Testing chart: $chart"
            echo "=================================="
            
            # Use common test-values.yaml file for all charts
            VALUES_FILE="charts/$chart/test-values.yaml"
            
            # Check if values file exists
            if [ ! -f "$VALUES_FILE" ]; then
              echo "::error::Values file not found: $VALUES_FILE"
              FAILED_CHARTS="$FAILED_CHARTS $chart"
              TEST_RESULTS="$TEST_RESULTS\n‚ùå **$chart**: Values file not found ($VALUES_FILE)"
              EXIT_CODE=1
              continue
            fi
            
            # Test 1: Helm template validation
            echo "Running Helm template validation for $chart..."
            if helm template "$chart" "charts/$chart" -f "$VALUES_FILE" > /dev/null 2>&1; then
              echo "‚úÖ Template validation passed for $chart"
              TEMPLATE_STATUS="‚úÖ Template validation passed"
            else
              echo "‚ùå Template validation failed for $chart"
              TEMPLATE_STATUS="‚ùå Template validation failed"
              FAILED_CHARTS="$FAILED_CHARTS $chart"
              EXIT_CODE=1
            fi
            
            # Test 2: Dry-run installation
            echo "Performing dry-run Helm installation for $chart..."
            if helm upgrade --install "$chart" "charts/$chart" \
              -f "$VALUES_FILE" \
              --create-namespace \
              --namespace "test-namespace-$chart" \
              --timeout 1m \
              --atomic \
              --dry-run > /dev/null 2>&1; then
              echo "‚úÖ Dry-run installation passed for $chart"
              DRYRUN_STATUS="‚úÖ Dry-run installation passed"
            else
              echo "‚ùå Dry-run installation failed for $chart"
              DRYRUN_STATUS="‚ùå Dry-run installation failed"
              FAILED_CHARTS="$FAILED_CHARTS $chart"
              EXIT_CODE=1
            fi
            
            # Add chart results
            if [[ "$FAILED_CHARTS" == *"$chart"* ]]; then
              TEST_RESULTS="$TEST_RESULTS\n‚ùå **$chart**: $TEMPLATE_STATUS, $DRYRUN_STATUS"
            else
              SUCCESS_CHARTS="$SUCCESS_CHARTS $chart"
              TEST_RESULTS="$TEST_RESULTS\n‚úÖ **$chart**: $TEMPLATE_STATUS, $DRYRUN_STATUS"
            fi
            
            echo ""
          done
          
          # Set outputs for PR comment
          echo "test-results<<EOF" >> $GITHUB_OUTPUT
          echo -e "$TEST_RESULTS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "exit-code=$EXIT_CODE" >> $GITHUB_OUTPUT
          echo "failed-charts=$FAILED_CHARTS" >> $GITHUB_OUTPUT
          echo "success-charts=$SUCCESS_CHARTS" >> $GITHUB_OUTPUT
          
          if [ $EXIT_CODE -eq 0 ]; then
            echo "üéâ All changed charts passed validation!"
          else
            echo "üí• Some charts failed validation!"
          fi
          
          exit $EXIT_CODE

      - name: Post PR comment with test results
        if: github.event_name == 'pull_request'
        run: |
          # Prepare comment body
          if [ "${{ steps.helm-tests.outputs.exit-code }}" = "0" ]; then
            comment_body="## üéâ Helm Chart Tests Passed!

            All modified charts have been successfully validated:

            ${{ steps.helm-tests.outputs.test-results }}

            **Summary:**
            - ‚úÖ Charts tested: $(echo '${{ needs.detect-changes.outputs.changed-charts }}' | tr ',' ' ')
            - ‚úÖ All template validations passed
            - ‚úÖ All dry-run installations passed

            The PR is ready for review! üöÄ"
          else
            comment_body="## ‚ùå Helm Chart Tests Failed

            Some charts failed validation:

            ${{ steps.helm-tests.outputs.test-results }}

            **Summary:**
            - üìä Charts tested: $(echo '${{ needs.detect-changes.outputs.changed-charts }}' | tr ',' ' ')
            - ‚ùå Failed charts:${{ steps.helm-tests.outputs.failed-charts }}
            - ‚úÖ Successful charts:${{ steps.helm-tests.outputs.success-charts }}

            Please fix the issues before merging. üîß"
          fi
          
          # Post comment to PR using curl
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments" \
            -d "{\"body\": $(echo "$comment_body" | jq -Rs .)}"
          
          # Exit with the original exit code
          exit ${{ steps.helm-tests.outputs.exit-code }}

      # - name: Run chart-releaser
      #   uses: helm/chart-releaser-action@v1.6.0
      #   if: success()
      #   env:
      #     CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
