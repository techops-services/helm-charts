# Default values for graphprotocol-node.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: graphprotocol/graph-node
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  annotations: {}
  type: ClusterIP
  metricsPort: 8040
  jsonRpcPort: 8020
  graphqlPort: 8000
  graphqlWsPort: 8001
  indexPort: 8030

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

config:
  ipfs: ""
  chains: {}
    # mainnet:
    #   providers:
    #   - label: name
    #     transport: rpc
    #     url: url
    #     features: [ archive ]
    #     headers: {"Authorization": "Bearer foo"}

postgres:
  db: ""
  host: ""
  replicaHost: ""
  user: ""
  password:
    value: ""
    # fromSecret:
    #   name:
    #   key:

# Shouldn't have - sign, cause it would be replaced with _
blockIngestorNodeId: index_node

# Possible values: query-node, index-node
role: "query-node"

monitoring:
  enabled: false
  labels: "prometheus"
  serviceMonitor: {}
    # metricRelabelings:
    #   - action: drop
    #     regex: foo_bar
    #     sourceLabels: [__name__]

ingress:
  enabled: false
  # ingressClassName: traefik # could also be nginx or whatever else, depending on the ingress controller used by the cluster
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    # - chart-example.local
  tls:
    enabled: false
    # issuerName: letsencrypt # could also be cloudflare or whatever else, depending on the cert manager used by the cluster

ingressRpc:
  enabled: false
  # ingressClassName: traefik # could also be nginx or whatever else, depending on the ingress controller used by the cluster
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    # - chart-example.local
  tls:
    enabled: false
    # issuerName: letsencrypt # could also be cloudflare or whatever else, depending on the cert manager used by the cluster

ingressIndex:
  enabled: false
  # ingressClassName: traefik # could also be nginx or whatever else, depending on the ingress controller used by the cluster
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    # - chart-example.local
  tls:
    enabled: false
    # issuerName: letsencrypt # could also be cloudflare or whatever else, depending on the cert manager used by the cluster

ingressWebsocket:
  enabled: false
  # ingressClassName: traefik # could also be nginx or whatever else, depending on the ingress controller used by the cluster
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    # - chart-example.local
  tls:
    enabled: false
    # issuerName: letsencrypt # could also be cloudflare or whatever else, depending on the cert manager used by the cluster

# error, info, or debug
logLevel: error

# Environment variables to be passed to the containers
env:
  GRAPH_GRAPHQL_MAX_FIRST: 1000
  EXPERIMENTAL_SUBGRAPH_VERSION_SWITCHING_MODE: instant

# If you need to increase the default of 10 seconds, use this:
# terminationGracePeriodSeconds: 30

# -- Autoscaling configs for query nodes
autoscaling:
  {}
  # enabled: false
  # minReplicas: 2
  # maxReplicas: 6
  # targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80
  # scaleUp:
  #   stabilizationWindowSeconds: 30
  #   policyType: pod
  #   value: 6
  #   periodSeconds: 30
  # scaleDown:
  #   stabilizationWindowSeconds: 300
  #   policyType: pod
  #   value: 2
  #   periodSeconds: 30
